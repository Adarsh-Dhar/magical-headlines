generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id                    String         @id @default(cuid())
  name                  String?
  walletAddress         String         @unique
  createdAt             DateTime       @default(now())
  updatedAt             DateTime       @updatedAt
  comments              Comment[]
  holdings              Holding[]
  likes                 Like[]
  notificationsAuthored Notification[] @relation("NotificationActor")
  notifications         Notification[] @relation("NotificationUser")
  profile               Profile?
  storiesSubmitted      Story[]        @relation("SubmittedStories")
  subscribers           Subscription[] @relation("AuthorRelation")
  subscriptions         Subscription[] @relation("SubscriberRelation")
  trades                Trade[]
}

model Story {
  id               String    @id @default(cuid())
  headline         String
  content          String
  originalUrl      String    @unique
  arweaveUrl       String
  arweaveId        String
  onchainSignature String
  submitterId      String
  onMarket         Boolean   @default(false)
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  authorAddress    String?
  nonce            String?
  comments         Comment[]
  likes            Like[]
  submitter        User      @relation("SubmittedStories", fields: [submitterId], references: [id])
  token            Token?
  tags             Tag[]     @relation("StoryToTag")
}

model Tag {
  id      String  @id @default(cuid())
  name    String  @unique
  stories Story[] @relation("StoryToTag")
}

model Token {
  id             String              @id @default(cuid())
  price          Float               @default(0.01)
  priceChange24h Float               @default(0)
  volume24h      Float               @default(0)
  marketCap      Float               @default(0)
  storyId        String              @unique
  createdAt      DateTime            @default(now())
  marketAccount  String?             @unique
  mintAccount    String?             @unique
  newsAccount    String?             @unique
  holders        Holding[]
  story          Story               @relation(fields: [storyId], references: [id])
  volumeMinutes  TokenVolumeMinute[]
  trades         Trade[]
}

model Holding {
  id      String @id @default(cuid())
  amount  Float
  userId  String
  tokenId String
  token   Token  @relation(fields: [tokenId], references: [id])
  user    User   @relation(fields: [userId], references: [id])

  @@unique([userId, tokenId], name: "UserTokenHolding")
}

model Trade {
  id           String    @id @default(cuid())
  type         TradeType
  amount       Float
  priceAtTrade Float
  traderId     String
  tokenId      String
  timestamp    DateTime  @default(now())
  token        Token     @relation(fields: [tokenId], references: [id])
  trader       User      @relation(fields: [traderId], references: [id])
}

model TokenVolumeMinute {
  id            String   @id @default(cuid())
  tokenId       String
  minute        DateTime
  volumeSol     Float    @default(0)
  tradeCount    Int      @default(0)
  buyVolumeSol  Float    @default(0)
  sellVolumeSol Float    @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  token         Token    @relation(fields: [tokenId], references: [id])

  @@unique([tokenId, minute], name: "UniqueTokenMinute")
  @@index([tokenId, minute])
}

model Like {
  id        String   @id @default(cuid())
  storyId   String
  userId    String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  story     Story    @relation(fields: [storyId], references: [id])

  @@unique([storyId, userId], name: "UserStoryLike")
}

model Comment {
  id        String   @id @default(cuid())
  storyId   String
  userId    String
  content   String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  story     Story    @relation(fields: [storyId], references: [id])
}

model Subscription {
  id           String   @id @default(cuid())
  subscriberId String
  authorId     String
  createdAt    DateTime @default(now())
  author       User     @relation("AuthorRelation", fields: [authorId], references: [id])
  subscriber   User     @relation("SubscriberRelation", fields: [subscriberId], references: [id])

  @@unique([subscriberId, authorId], name: "UniqueSubscription")
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  actorId   String
  type      String
  storyId   String
  headline  String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  actor     User     @relation("NotificationActor", fields: [actorId], references: [id])
  user      User     @relation("NotificationUser", fields: [userId], references: [id])

  @@index([userId, read])
  @@index([storyId])
}

model Profile {
  id                 String          @id @default(cuid())
  userAddress        String          @unique
  onchainAddress     String?         @unique
  totalPnl           Float           @default(0)
  totalVolume        Float           @default(0)
  tradesCount        Int             @default(0)
  wins               Int             @default(0)
  trophies           Int             @default(0)
  currentSeasonPnl   Float           @default(0)
  lastTradeTimestamp DateTime?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  user               User            @relation(fields: [userAddress], references: [walletAddress])
  seasonStats        SeasonStats[]
  positions          TradePosition[]
}

model Season {
  id                String        @id @default(cuid())
  seasonId          Int           @unique
  onchainAddress    String?       @unique
  startTimestamp    DateTime
  endTimestamp      DateTime
  isActive          Boolean       @default(true)
  totalParticipants Int           @default(0)
  totalVolume       Float         @default(0)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  seasonStats       SeasonStats[]
}

model SeasonStats {
  id          String   @id @default(cuid())
  profileId   String
  seasonId    String
  pnl         Float    @default(0)
  volume      Float    @default(0)
  tradesCount Int      @default(0)
  wins        Int      @default(0)
  rank        Int?
  trophyTier  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  season      Season   @relation(fields: [seasonId], references: [id])
  profile     Profile  @relation(fields: [profileId], references: [id])

  @@unique([profileId, seasonId])
  @@index([seasonId, pnl])
}

model TradePosition {
  id             String   @id @default(cuid())
  userAddress    String
  marketAddress  String
  onchainAddress String?  @unique
  totalBought    Float    @default(0)
  totalSold      Float    @default(0)
  avgBuyPrice    Float    @default(0)
  realizedPnl    Float    @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  profile        Profile  @relation(fields: [userAddress], references: [userAddress])

  @@unique([userAddress, marketAddress])
  @@index([userAddress])
}

enum TradeType {
  BUY
  SELL
}
