// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// 1. Defines the database connection and Prisma client generator.
datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

generator client {
  provider = "prisma-client-js"
}

// --- ENUMS ---
// Defines the type of a trade.
enum TradeType {
  BUY
  SELL
}


// --- USER MODEL ---
// Simplified user model identified by wallet address only.

// User model represents a unique user, identified by their wallet address.
model User {
  id            String    @id @default(cuid())
  name          String?
  walletAddress String    @unique 

  // User-specific application data
  storiesSubmitted Story[]   @relation("SubmittedStories")
  holdings         Holding[]
  trades           Trade[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


// --- APPLICATION-SPECIFIC MODELS ---

// Story model represents a news article submitted by a user.
model Story {
  id          String @id @default(cuid())
  headline    String
  content     String
  originalUrl String @unique
  
  // Arweave storage
  arweaveUrl  String
  arweaveId   String
  
  // Onchain data
  onchainSignature String
  authorAddress    String? // Wallet address of the story author
  nonce           String? // Nonce used for PDA derivation

  submitterId String
  submitter   User   @relation("SubmittedStories", fields: [submitterId], references: [id])

  tags  Tag[]
  token Token? // A story has one corresponding token

  onMarket    Boolean   @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tag model for categorizing stories.
model Tag {
  id      String  @id @default(cuid())
  name    String  @unique 
  stories Story[]
}

// Token model represents the tradable asset linked to a Story.
model Token {
  id               String    @id @default(cuid())
  price            Float     @default(0.01)
  priceChange24h   Float     @default(0)
  volume24h        Float     @default(0)
  marketCap        Float     @default(0)

  storyId          String    @unique
  story            Story     @relation(fields: [storyId], references: [id])

  holders          Holding[]
  trades           Trade[]

  createdAt        DateTime  @default(now())
}

// Holding model represents a user's ownership of a specific token.
model Holding {
  id       String  @id @default(cuid())
  amount   Float

  userId   String
  user     User    @relation(fields: [userId], references: [id])

  tokenId  String
  token    Token   @relation(fields: [tokenId], references: [id])

  @@unique([userId, tokenId], name: "UserTokenHolding") // A user can only have one holding entry per token
}

// Trade model logs every buy and sell transaction.
model Trade {
  id           String    @id @default(cuid())
  type         TradeType
  amount       Float
  priceAtTrade Float

  traderId     String
  trader       User      @relation(fields: [traderId], references: [id])

  tokenId      String
  token        Token     @relation(fields: [tokenId], references: [id])

  timestamp    DateTime  @default(now())
}
